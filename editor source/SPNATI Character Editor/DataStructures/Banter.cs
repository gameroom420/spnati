using SPNATI_Character_Editor.IO;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

namespace SPNATI_Character_Editor
{
    [XmlRoot("banter")]
    [XmlHeader("This file was machine generated using the Character Editor {Version} at {Time} on {Date}. Do not edit this file directly unless you know what you're doing.")]
    public class Banter : IHookSerialization
    {
        private Character _character;
        private bool _initialized = false;

        [XmlElement("owner")]
        public string Owner;

        [XmlElement("version")]
        public string Version;

        [XmlElement("timestamp")]
        public long Timestamp;

        [XmlArray("opponents")]
        [XmlArrayItem("opponent")]
        public List<TargetingCharacter> TargetingCharacters = new List<TargetingCharacter>();


        public void Initialize()
        {
            if (_initialized) { return; }
            _initialized = true;
            if (_character == null) { return; }
        }

        public void LinkOwner(Character character)
        {
            Owner = character.FolderName;
            _character = character;
        }

        public void WriteCEVersion()
        {
            Version = Config.Version;
        }
     
        public void OnBeforeSerialize()
        {
        }

        public void OnAfterDeserialize(string source)
        {
        }      
    }

    public class TargetingCharacter
    {
        [XmlAttribute("id")]
        public string Id;

        [XmlAttribute("timestamp")]
        public long Timestamp;

        [XmlAttribute("inboundCount")]
        public long InboundCount;

        [XmlElement("inbound")]
        public List<InboundLine> Inbounds = new List<InboundLine>();

        public TargetingCharacter() { }

        public TargetingCharacter(Character loaded, Character target)
        {
            Id = loaded.FolderName;
            Timestamp = loaded.Metadata.LastUpdate;

            foreach (Case stageCase in loaded.GetWorkingCasesTargetedAtCharacter(target, TargetType.DirectTarget))
            {
                foreach (DialogueLine dialogueLine in stageCase.Lines)
                {
                    InboundLine inboundLine = new InboundLine(stageCase, dialogueLine);
                    Inbounds.Add(inboundLine);
                }
            }

            InboundCount = Inbounds.Count;
        }
    }

    public class InboundLine
    {
        [XmlAttribute("caseTag")]
        public string CaseTag;

        [XmlAttribute("condition")]
        public int Condition;

        [XmlAttribute("stage")]
        public string StageRange;

        [XmlAttribute("img")]
        public string Img;

        [XmlAttribute("newness")]
        public string Newness;

        [XmlAttribute("color")]
        public string ColorCode;

        [XmlElement("text")]
        public string Text;

        public InboundLine() { }

        public InboundLine(Case c, DialogueLine line)
        {
            CaseTag = c.Tag;
            StageRange = c.StageRange;
            Text = line.Text;
            Newness = "N";
            if (line.Image != null)
            {
                Img = line.Image;
            }
            Condition = 1;
            foreach (TargetCondition condition in c.Conditions)
            {
                Condition *= condition.GetHashCode();
            }
        }
    }
}
